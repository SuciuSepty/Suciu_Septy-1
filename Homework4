import customtkinter as ctk
import tkinter as tk
from datetime import date
import json

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

app = ctk.CTk()
app.title("Inventarul unei Biblioteci")
app.geometry("1280x1080")

def salveaza_in_json(carte):
    try:
        with open("carti.json", "r") as f:
            carti = json.load(f)
    except FileNotFoundError:
        carti = []  # dacă fișierul nu există, începe cu o listă goal
    carti.append(carte)
    CorectVariable=tk.StringVar(app,value="Ati introdus datele cu succes in baza de date.")
    Succes=ctk.CTkLabel(app,textvariable=CorectVariable)
    Succes.pack()

    with open("carti.json", "w") as f:
        json.dump(carti, f, indent=4)



# ---------- Functia de calcul ----------

def calculeaza_varsta():
    try:
        titlu = entry_titlu.get()
        autor = entry_autor.get()
        an_publicare = int(entry_an_publicare.get())
        gen = entry_gen.get()
        numar_de_pagini = int(entry_numar_de_pagini.get())

        # Verifică dacă câmpurile Titlu, Autor și Gen conțin cifre
        if any(char.isdigit() for char in titlu):
            raise ValueError("Titlu invalid")
        if any(char.isdigit() for char in autor):
            raise ValueError("Autor invalid")
        if any(char.isdigit() for char in gen):
            raise ValueError("Gen invalid")

        # Verifică dacă Anul publicării și Numărul de pagini sunt numere
        if not entry_an_publicare.get().isdigit() or not entry_numar_de_pagini.get().isdigit():
            raise ValueError("Numere invalide")

        carte = {
            "Titlu": titlu,
            "autor": autor,
            "an_publicare": an_publicare,
            "gen": gen,
            "numar_de_pagini": numar_de_pagini
        }

        salveaza_in_json(carte)

        rezultat_varsta.configure(text="Cartea a fost adăugată cu succes!")
        rezultat_viata.configure(text="")

    except ValueError as e:
        if str(e) == "Titlu invalid":
            rezultat_varsta.configure(text="Eroare: Nu introduceți cifre în câmpul Titlu.")
        elif str(e) == "Autor invalid":
            rezultat_varsta.configure(text="Eroare: Nu introduceți cifre în câmpul Autor.")
        elif str(e) == "Gen invalid":
            rezultat_varsta.configure(text="Eroare: Nu introduceți cifre în câmpul Gen.")
        else:
            rezultat_varsta.configure(text="Eroare: Introduceți doar numere în câmpurile An publicare și Număr de pagini.")

        rezultat_viata.configure(text="")


# ---------- Meniu ----------

label_ref = ctk.CTkLabel(app, text="Adaugarea unei noi carti in BAZA DE DATE", font=ctk.CTkFont(size=20, weight="bold"))
label_ref.pack(pady=10)

frame_ref = ctk.CTkFrame(app)
frame_ref.pack(pady=5)

entry_titlu = ctk.CTkEntry(frame_ref, placeholder_text="Titlul cartii:")
entry_autor = ctk.CTkEntry(frame_ref, placeholder_text="Autorul Cartii:")
entry_an_publicare = ctk.CTkEntry(frame_ref, placeholder_text="Anul publicarii:")
entry_gen = ctk.CTkEntry(frame_ref, placeholder_text="Genul cartii:")
entry_numar_de_pagini = ctk.CTkEntry(frame_ref, placeholder_text="Numar de pagini:")
entry_titlu.pack(side="left", padx=5)
entry_autor.pack(side="left", padx=5)
entry_an_publicare.pack(side="left", padx=5)
entry_gen.pack(side="left",padx=5)
entry_numar_de_pagini.pack(side="left",padx=5)


btn_calculeaza = ctk.CTkButton(app, text="Adauga", command=calculeaza_varsta)
btn_calculeaza.pack(pady=20)

rezultat_varsta = ctk.CTkLabel(app, text="", font=ctk.CTkFont(size=16))
rezultat_varsta.pack(pady=5)

rezultat_viata = ctk.CTkLabel(app, text="", font=ctk.CTkFont(size=16))
rezultat_viata.pack(pady=5)

app.mainloop()
